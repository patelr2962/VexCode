#pragma config(Sensor, in1,    leftPmeter,     sensorPotentiometer)
#pragma config(Sensor, in2,    rightPmeter,    sensorPotentiometer)
#pragma config(Sensor, in3,    Gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightEncoder,   sensorQuadEncoder)
#pragma config(Motor,  port1,           clawMotor,      tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBase,     tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftLift,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           rightLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           rightBase,    tmotorVex393_MC29, openLoop, driveRight, encoderPort, dgtl3)

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int gyrooutput;
int gyrocurrentvalue = 0;

void moveBase (int speed)
{
	motor[leftBase] = speed;
	motor[rightBase] = speed;
}

void moveRightBase (int speed)
{
	motor[rightBase] = speed;
}

void moveLeftBase (int speed)
{
	motor[leftBase] = speed;
}

void turnBase (int speed) //positive is clockwise
{
	motor[leftBase] = speed;
	motor[rightBase] = -speed;
}

void stopbase()
{
	motor[leftBase] = 0;
	motor[rightBase] = 0;
}

void fixgyro()
{
	SensorFullCount[in3]] = 36000;
}

void resetGyro(int value = 0)
{
	gyrocurrentvalue = SenorValue[Gyro] + value;
}

task GyroProcessingBlock()
{
	while (true)
	{
		gyrooutput = SenorValue[Gyro] - gyrocurrentvalue;
		wait1Msec(20);
	}
}
	
//reading is in ticks -- 627.2 ticks/revolution (393)
//1 turn of wheels -- 5 inch wheels = 627.2*2 ticks
//5*pi inches =  627.2*2 ticks

//ticks per inch = (627.2*2)/(5*pi) = 79.8575842458
int inchToTicks (float inch)
{
	int ticks;
	ticks = inch*79.8575842458;
	return ticks;
}

int degreesToTicks (float degree)
{
	int ticksPerTurn = /*Find amount during tests*/;
	int ticks = degree*ticksPerTurn/360;
	return ticks;
}

int fixTimerValue (float rawSeconds)
{
	int milliseconds;
	milliseconds = rawSeconds*1000;
	if (milliseconds < 250)
	{
		milliseconds = 250;
	}
	return milliseconds;
}
//>>>>>>>>>>>>>>>>>>>>----------0----------<<<<<<<<<<<<<<<<<<<<

void PIDBaseControl (float target, float waitTime, float maxPower = 1)
{
	float Kp = /*Find amount during tests*/;
	float Ki = /*Find amount during tests*/;
	float Kd = /*Find amount during tests*/;
	float integralActiveZone = inchToTicks(/*Find amount during tests*/);
	float integralPowerLimit = 50/(Ki*maxPower);


	int error;

	float proportion;
	int integralRaw;
	float integral;
	int lastError;
	int derivative;
	float driveRaw;


	float integralActiveZone = inchToTicks(/*Find amount during tests*/);
	float integralPowerLimit = 50/(Ki*maxPower);

	int finalPower;
	
	//Error Correction 	
	float Kp_C = /*Find amount during tests*/;
	int error_drift;
	float driveDeduction;

	float driveLeft;
	float driveRight;

	bool timerBool = true;

	SensorValue[leftEncoder] = 0;
	SensorValue[rightEncoder] = 0;

	resetGyro();
	clearTimer(T1);

	while(time1[T1] < fixTimerValue(waitTime)) 
	{

		error = inchesToTick(target) - (SensorValue[leftEncoder]+SensorValue[rightEncoder]);
		
		proportion = Kp*error;

		if (abs(error) < integralActiveZone && error != 0)
		{
			integralRaw = integralRaw+error;
		}
		else if (error == 0)
		{
			integralRaw = 0
		}
		else
		{
			integralRaw = 0;
		}
		if (integralRaw > integralPowerLimit)
		{
			integralRaw = integralPowerLimit;
		}
		if (integralRaw < -integralPowerLimit)
		{
			integralRaw = -integralPowerLimit;
		}
		integral = Ki*integralRaw;

		derivative = Kd*(error-lastError);
		lastError = error;

		if (error == 0)
		{
			derivative = 0;
		}

		finalPower = proportion+integral+derivative; //(P+I+D)

		if (finalPower > maxPower*127)
		{
			finalPower = maxPower*127;
		}
		else if (finalPower < -maxPower*127)
		{
			finalPower = -maxPower*127;
		}

		error_drift = gyrooutput;

		driveDeduction = Kp_C*error_drift;

		driveLeft = finalPower+driveDeduction
		driveRight = finalPower-driveDeduction

		moveLeftBase(driveLeft);
		moveRightBase(driveRight);

		//When error is 30, the error in inches is -0.3
		wait1Msec(40);

		if (error < 30)
		{
			timerBool = false;
		}
		if (timerBool)
		{
			clearTimer(T1);
		}
	}
	stopBase;
}

void PIDBaseTurn (int target, float waitTime, float maxPower = 1)
{
	float Kp = /*Find amount during tests*/;
	float Ki = /*Find amount during tests*/;
	float Kd = /*Find amount during tests*/;

	int error;

	float proportion;
	int integralRaw;
	float integral;
	int lastError;
	int derivative;


	float integralActiveZone = inchToTicks(/*Find amount during tests*/);
	float integralPowerLimit = 50/Ki;

	int finalPower;

	bool timerBool = true;

	SensorValue[leftEncoder] = 0;
	SensorValue[rightEncoder] = 0;

	clearTimer(T1);

	while(time1[T1] < fixTimerValue(waitTime)) 
	{

		error = inchesToTick(target) - (SensorValue[leftEncoder]-SensorValue[rightEncoder]);
		
		proportion = Kp*error;

		if (abs(error) < integralActiveZone && error != 0)
		{
			integralRaw = integralRaw+error;
		}
		else
		{
			integralRaw = 0;
		}
		if (integralRaw > integralPowerLimit)
		{
			integralRaw = integralPowerLimit;
		}
		if (integralRaw < -integralPowerLimit)
		{
			integralRaw = -integralPowerLimit;
		}
		integral = Ki*integralRaw;

		derivative = Kd*(error-lastError);
		lastError = error;

		if (error == 0)
		{
			derivative = 0;
		}

		finalPower = proportion+integral+derivative; //(P+I+D)

		if (finalPower > maxPower*127)
		{
			finalPower = maxPower*127;
		}
		else if (finalPower < -maxPower*127)
		{
			inalPower = -maxPower*127;
		}

		turnBase(finalPower);

		//When error is 30, the error in inches is -0.3
		wait1Msec(40);

		if (error < 30)
		{
			timerBool = false;
		}
		if (timerBool)
		{
			clearTimer(T1);
		}
	}
	turnBase(0);
}

task main()
{
	PIDBaseControl(12,1,0.75);
	PIDBaseTurn(1000,1);
	while(true)
	{
		wait1Msec(20);
	}
}
