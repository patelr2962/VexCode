#pragma config(Sensor, in1,    leftPmeter,     sensorPotentiometer)
#pragma config(Sensor, in2,    rightPmeter,    sensorPotentiometer)
#pragma config(Sensor, in3,    Gyro,           sensorGyro)
#pragma config(Sensor, in4,    leftIpot,       sensorPotentiometer)
#pragma config(Sensor, in5,    rightIpot,      sensorPotentiometer)
#pragma config(Sensor, dgtl1,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightEncoder,   sensorQuadEncoder)
#pragma config(Motor,  port1,           clawMotor,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBase,      tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftLift,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           leftIntake,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           rightLift,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           rightBase,     tmotorVex393_MC29, openLoop, driveRight, encoderPort, dgtl3)
#pragma config(Motor,  port8,           rightIntake,   tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Index:

Joystick Mapping:

Joystick 1-

Channel 1: Base/2
Channel 2: Base/2
Channel 3: Base
Channel 4: Base
Channel 5:
U =
D =
Channel 6:
U =
D =
Channel 7:
U =
R =
D =
L =
Channel 8:
U =
R =
D =
L =

Joystick 2-

Channel 1:
Channel 2:
Channel 3:
Channel 4:
Channel 5:
U = 9 Cones
D = 10 Cones
Channel 6:
U = 11 Cones
D = 12 Cones
Channel 7:
U = 1 Cone
R = 2 Cones
D = 3 Cones
L = 4 Cones
Channel 8:
U = 5 Cones
R = 6 Cones
D = 7 Cones
L = 8 Cones
*/

//Potentiometer based straightening
void liftStraight()
{
	int highLift;
	highLift = 80;

	int normLift;
	normLift = 93;

	if(SensorValue[leftPmeter] > SensorValue[rightPmeter])
	{
		motor[leftLift] = highLift;
		motor[rightLift] = normLift;
	}
	if(SensorValue[leftPmeter] < SensorValue[rightPmeter])
	{
		motor[leftLift] = normLift;
		motor[rightLift] = highLift;
	}
	if(SensorValue[leftPmeter] == SensorValue[rightPmeter])
	{
		motor[leftLift] = normLift;
		motor[rightLift] = normLift;
	}
}

/*
//Encoder based straightening
void moveStraight()
{
int quickMotor;
quickMotor = 50;

int normMotor;
normMotor = 63;

if(SensorValue[leftEncoder] > SensorValue[rightEncoder])
{
motor[leftBase] = quickMotor;
motor[rightBase] = normMotor;
}
if(SensorValue[leftEncoder] < SensorValue[rightEncoder])
{
motor[leftBase] = normMotor;
motor[rightBase] = quickMotor;
}
if(SensorValue[leftEncoder] == SensorValue[rightEncoder])
{
motor[leftBase] = normMotor;
motor[rightBase] = normMotor;
}
}

//Encoder clearing function
void clearEncoders()
{
SensorValue[leftEncoder] = 0;
SensorValue[rightEncoder] = 0;
}
*/

task main()
{
	int normLift;
	normLift = 93;
	/*while(SensorValue[leftPmeter] < 4000)
	{
	liftStraight();
	}*/

	while(true)
	{
		//Robot Movement
		motor[leftBase] = (vexRT[Ch2] + vexRT[Ch1])/2;
		motor[rightBase] = (vexRT[Ch2] - vexRT[Ch1])/2;

		motor[leftBase] = (vexRT[Ch3] + vexRT[Ch4])/1;
		motor[rightBase] = (vexRT[Ch3] - vexRT[Ch4])/1;

		//Intake Controls
			if(vexRT[Btn5U] == 1)
			{
				if(SensorValue[leftIpot] < 900) 
				{ 
					motor[leftIntake] = 90; 
					motor[rightIntake] = 90;
				}
				else 
				{ 
					motor[leftIntake] = 0; 
					motor[rightIntake] = 0;
				}
			}
			if(vexRT[Btn5D] == 1) 
			{
				if(SensorValue[leftIpot] > 550) 
				{ 
					motor[leftIntake] = -90; 
					motor[rightIntake] = -90;
				}
				else 
				{ 
					motor[leftIntake] = 0; 
					motor[rightIntake] = 0;
				}
			}
		
		/*//Claw Controls
		if(vexRT[Btn6U] == 1)
		{
			motor[clawMotor] = 127;
		}
		else if(vexRT[Btn6D] == 1)
		{
			motor[clawMotor] = -127;
		}
		else
		{
			motor[clawMotor] = 0;
		}*/

		//Lift Controls
		if(vexRT[Btn6U] == 1)
		{
			liftStraight();
			/*motor[rightLift] = normLift;
			motor[leftLift] = normLift;*/
		}
		else if(vexRT[Btn6D] == 1)
		{
			motor[rightLift] = -normLift;
			motor[leftLift] = -normLift;
		}
		else
		{
			motor[rightLift] = 0;
			motor[leftLift] = 0;
		}
	}
}
